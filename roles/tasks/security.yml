---
#install SQL server 2017 ediotion

- name: install SQL server 2017 edition
  hosts: all
  tasks:
    - include_vars: sqlvarsnew.yml

    - name: Powershell | Check for  DSC Powershell module(SQLServer,StorageDsc,ServerManager,dbatools,xNetworking)
      win_psmodule:
        name: "{{item}}"
        state: present
      loop:
        - SQLServerDsc
        - dbatools
        - xNetworking
        - StorageDsc
        - ServerManager

    # Pre-Installation of SQL Instance Checklist

    # Hardware and Software Installation Minimum Requirements

    - name: Windows | Install .NET Framework 4.5 Features, WAS
      win_feature:
        name: "{{item}}"
        state: present
        include_sub_features: True
      loop:
        - NET-Framework-45-Features
        - WAS

    - name: Windows | NET-Framework-Features, Install .NET Framework Core
      win_feature:
        name: "{{item}}"
        state: present
      loop:
        - NET-Framework-Core
        - NET-Framework-Features

    #Set Service account ( RTH\RTHADM077 and RTH\SrvSQLMonitor
    - name: "Add Group/User to local administrator"
      win_group_membership:
        name: Administrators
        members:
          - "{{ mssql_sqlsvc_account }}"
        state: present

    -  name: "Step 2: Hard Disk Requirement and Capacity Planning\"(64K,drives availability)\""
       register: diskInfo
       win_shell: |
         # Fetch the current Volume List
         $volumeList = Get-Volume | select DriveLetter,  FileSystemLabel, @{L="Capacity";E={"{0:N2}" -f ($_.Size/1GB)}},@{L='FreeSpaceGB'         ;E={"{0:N2}" -f ($_.SizeRemaining /1GB)}}, @{L="AllocationUnitSize";E={"{0:N2}" -f ($_.AllocationUnitSize/1KB)}}

         write-host $volumeList

          foreach($disk in $volumeList)
          {

              if(("$disk.AllocationUnitSize" -ne "64.00") -and (($disk.DriveLetter) -ne 'C') -and ($disk.FileSystemLabel -ne 'Recovery'))
              {

              Format-Volume -DriveLetter $disk.DriveLetter -NewFileSystemLabel $disk.FileSystemLabel -FileSystem NTFS -AllocationUnitSize              65536 –Force -Confirm:$false
              }

          else

          {write-host "$volumeList"}

          }
          #Fetch the updated volume list
          $volumeList = Get-Volume | select DriveLetter,  FileSystemLabel, @{L="Capacity";E={"{0:N2}" -f ($_.Size/1GB)}},@{L='FreeSpaceGB          ';E={"{0:N2}" -f ($_.SizeRemaining /1GB)}}, @{L="AllocationUnitSize";E={"{0:N2}" -f ($_.AllocationUnitSize/1KB)}}

          $volumeList

    - name: Configure Local Security Settings for the SQL Service Account
      win_user_right:
        name: "{{item}}"
        users:
          - .\Administrator
          - "{{ mssql_sqlsvc_account }}"
        action: add
      loop:
        - SeManageVolumePrivilege #Perform Volume Maintenance Tasks
        - SeLockMemoryPrivilege #Lock pages in memory”


    - name: "Step 9: Set the Page File on the Local Drive to at Least 2 GB (10 GB is good)"
      win_pagefile:
        drive: C
        initial_size: 512
        maximum_size: 2048
        override: no
        state: present
      tags: pagefile

    - name: Ensuring server reboot is not pending before installation step
      when: ansible_reboot_pending
      debug:
        msg: "Pending reboot detected"
      changed_when: true
      notify: reboot windows


      ##SQL server installation process
    - name: Fetch SQL Media Downloader from given URL
      win_get_url:
        url: "{{ mssql_installation_source }}"
        dest: "{{ mssql_temp_download_path }}\\SQLServer2017-SSEI-Dev.exe"

    - name: Create SQL installation directory if not already present
      win_file:
        path: "{{mssql_installation_path}}"
        state: directory

    - name: Use Media Downloader to fetch SQL Installation CABs to {{ mssql_installation_path }}
      win_shell: "{{ mssql_temp_download_path }}\\SQLServer2017-SSEI-Dev.exe /Action=Download /MediaPath={{ mssql_installation_path }} /MediaType=CAB /Quiet"
      args:
        creates: "{{ mssql_installation_path }}\\SQLServer2017-DEV-x64-ENU.exe"

    - name: Extract Installation Media
      win_shell:  "{{ mssql_installation_path }}\\SQLServer2017-DEV-x64-ENU.exe /X:{{ mssql_installation_path }}\\Media /Q"
      args:
        creates: "{{ mssql_installation_path }}\\Media\\SETUP.EXE"



    - name: Install SQL Server
      win_dsc:
        resource_name: SQLSetup
        Action: Install
        UpdateEnabled: True
        SourcePath: "{{ mssql_installation_path }}\\Media"
        InstanceName: "{{ mssql_instance_name }}"
        InstallSharedDir: "{{ mssql_installshared_path }}"
        InstallSharedwowDir: "{{ mssql_installsharedwow_path }}"
        InstanceDir: "{{ mssql_instance_path }}"
        InstallSQLDataDir: "{{ mssql_sqlinstalldata_path }}"
        SQLUserDBDir: "{{ mssql_sqluserdata_path }}"
        SQLUserDBLogDir: "{{ mssql_sqluserlog_path }}"
        SQLTempDBDir: "{{ mssql_sqltempDB_path }}"
        SQLTempDBLogDir: "{{ mssql_sqltempDBlog_path }}"
        Features: "{{ mssql_features }}"
        SQLCollation: "{{ mssql_collation }}"
        BrowserSvcStartupType: "{{ mssql_browsersvc_mode }}"
        SuppressReboot: "{{ mssql_suppress_reboot }}"


        # SQL Service Account
        SQLSvcAccount_username: "{{ mssql_sqlsvc_account }}"
        SQLSvcAccount_password: "{{ mssql_sqlsvc_account_pass }}"
        # SQL Agent Service Account
        AgtSvcAccount_username: "{{ mssql_agentsvc_account }}"
        AgtSvcAccount_password: "{{ mssql_agentsvc_account_pass }}"
        # SQL Analysis Services Account
        ASSvcAccount_username: "{{ mssql_assvc_account }}"
        ASSvcAccount_password: "{{ mssql_assvc_account_pass }}"

        # System Admins
        SQLSysAdminAccounts: "{{ mssql_sysadmin_accounts }}"
        #Analysis Services Admins (if installed)
        ASSysAdminAccounts: "{{ mssql_asadmin_accounts }}"

      tags: install_sql

    - name: Configure the MSSQLSERVERAGENT Service
      win_service:
        name: "{{'SQLAgent$' ~ mssql_instance_name}}"  #sqlserveragent
        start_mode: auto
        state: started
        username: "{{ mssql_agentsvc_account }}"
        password: "{{ mssql_agentsvc_account_pass }}"
      tags: install_sql

    - name: Install Chocolatey
      win_chocolatey:
        name:
        - chocolatey-core.extension
        - chocolatey-windowsupdate.extension
        state: present

    - name: choco install sql-server-management-studio
      win_chocolatey:
        name: "sql-server-management-studio"
        version: 18.5.1
        state: present

    - name: reboot windows
      win_reboot:
        reboot_timeout: 3600
        post_reboot_delay: 60
      when: mssql_suppress_reboot == False

